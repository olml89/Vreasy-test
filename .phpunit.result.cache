C:37:"PHPUnit\Runner\DefaultTestResultCache":4734:{a:2:{s:7:"defects";a:0:{}s:5:"times";a:55:{s:56:"CityFactoryTest::testAssertWeCanDetectInvalidCoordinates";d:0.002;s:53:"CityFactoryTest::testAssertCreationFromInputIsCorrect";d:0.001;s:59:"CityFactoryTest::testAssertCreationFromAnotherCityIsCorrect";d:0;s:31:"CityModelTest::testWeCanGetName";d:0;s:35:"CityModelTest::testWeCanGetLatitude";d:0;s:36:"CityModelTest::testWeCanGetLongitude";d:0;s:38:"CityModelTest::testCorrectJsonEncoding";d:0;s:43:"PaginationTest::testAssertGetLimitIsCorrect";d:0;s:73:"PaginationTest::testAssertNumPagesAfterSettingPaginatedResultSetIsCorrect";d:0;s:76:"PaginationTest::testAssertCurrentPageAfterSettingPaginatedResultSetIsCorrect";d:0;s:73:"PaginationTest::testAssertPrevPageAfterSettingPaginatedResultSetIsCorrect";d:0;s:73:"PaginationTest::testAssertNextPageAfterSettingPaginatedResultSetIsCorrect";d:0;s:75:"PaginationTest::testAssertNumPagesAfterSettingUnpaginatedResultSetIsCorrect";d:0;s:78:"PaginationTest::testAssertCurrentPageAfterSettingUnpaginatedResultSetIsCorrect";d:0;s:75:"PaginationTest::testAssertPrevPageAfterSettingUnpaginatedResultSetIsCorrect";d:0;s:75:"PaginationTest::testAssertNextPageAfterSettingUnpaginatedResultSetIsCorrect";d:0;s:70:"RequestValidationHeadersTest::testAssertInvalidAcceptCharsetReturns406";d:0.02;s:79:"RequestValidationHeadersTest::testAssertVoidContentTypeOnPostRequestsReturns415";d:0;s:82:"RequestValidationHeadersTest::testAssertInvalidContentTypeOnPostRequestsReturns415";d:0;s:95:"RequestValidationHeadersTest::testAssertValidContentTypeWithVoidCharsetOnPostRequestsReturns415";d:0;s:98:"RequestValidationHeadersTest::testAssertValidContentTypeWithInvalidCharsetOnPostRequestsReturns415";d:0;s:63:"RequestValidationHeadersTest::testAssertInvalidAcceptReturns406";d:0.001;s:104:"RequestValidationHeadersTest::testAssertVoidAcceptCharsetAndValidAcceptWithVoidImplicitCharsetReturns406";d:0;s:107:"RequestValidationHeadersTest::testAssertVoidAcceptCharsetAndValidAcceptWithInvalidImplicitCharsetReturns406";d:0;s:108:"RequestValidationHeadersTest::testAssertValidAcceptCharsetAndValidAcceptWithInvalidImplicitCharsetIsASuccess";d:0;s:75:"RequestValidationJsonInputsTest::testAssertInvalidStrictJsonInputReturns400";d:0;s:85:"RequestValidationJsonInputsTest::testAssertMissingFieldsFromStrictJsonInputReturns422";d:0;s:86:"RequestValidationJsonInputsTest::testAssertUnexpectedFieldsInStrictJsonInputReturns422";d:0;s:85:"RequestValidationJsonInputsTest::testAssertInvalidFieldsFromStrictJsonInputReturns422";d:0;s:77:"RequestValidationJsonInputsTest::testAssertInvalidFlexibleJsonInputReturns400";d:0;s:88:"RequestValidationJsonInputsTest::testAssertUnexpectedFieldsInFlexibleJsonInputReturns422";d:0;s:44:"RoutingTest::testAssertUnexistingRouteIsNull";d:0.001;s:58:"RoutingTest::testAssertWeCatchValidRoutesWithInvalidMethod";d:0;s:46:"RoutingTest::testAssertWeGetValidCallableRoute";d:0;s:83:"RoutingTest::testAssertWeGetValidControllerRouteWithCorrectControllerAndMethodNames";d:0;s:33:"SampleTest::testTrueAssertsToTrue";d:0;s:32:"SampleTest::that_assert_contains";d:0;s:64:"RequestValidationHeadersTest::testInvalidAcceptCharsetReturns406";d:0.002;s:73:"RequestValidationHeadersTest::testVoidContentTypeOnPostRequestsReturns415";d:0;s:76:"RequestValidationHeadersTest::testInvalidContentTypeOnPostRequestsReturns415";d:0;s:89:"RequestValidationHeadersTest::testValidContentTypeWithVoidCharsetOnPostRequestsReturns415";d:0;s:92:"RequestValidationHeadersTest::testValidContentTypeWithInvalidCharsetOnPostRequestsReturns415";d:0;s:57:"RequestValidationHeadersTest::testInvalidAcceptReturns406";d:0.001;s:98:"RequestValidationHeadersTest::testVoidAcceptCharsetAndValidAcceptWithVoidImplicitCharsetReturns406";d:0;s:101:"RequestValidationHeadersTest::testVoidAcceptCharsetAndValidAcceptWithInvalidImplicitCharsetReturns406";d:0;s:109:"RequestValidationHeadersTest::testAssertValidAcceptCharsetAndValidAcceptWithInvalidImplicitCharsetAreASuccess";d:0;s:75:"RequestValidationHeadersTest::testAssertValidHeadersOnGetRequestAreASuccess";d:0;s:77:"RequestValidationHeadersTest::testAssertValidHeadersOnAPostRequestAreASuccess";d:0;s:69:"RequestValidationJsonInputsTest::testInvalidStrictJsonInputReturns400";d:0;s:79:"RequestValidationJsonInputsTest::testMissingFieldsFromStrictJsonInputReturns422";d:0;s:80:"RequestValidationJsonInputsTest::testUnexpectedFieldsInStrictJsonInputReturns422";d:0;s:79:"RequestValidationJsonInputsTest::testInvalidFieldsFromStrictJsonInputReturns422";d:0;s:71:"RequestValidationJsonInputsTest::testInvalidFlexibleJsonInputReturns400";d:0;s:82:"RequestValidationJsonInputsTest::testUnexpectedFieldsInFlexibleJsonInputReturns422";d:0;s:79:"RequestValidationJsonInputsTest::testAssertWeCreateValidCitiesFromAValidRequest";d:0;}}}