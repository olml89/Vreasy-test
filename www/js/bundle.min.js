
var InputCity = (function() {


	var _method 	= '';
	var _endpoint 	= '';


	var getSuccessMessage = function(jqXHR) {

		//edition mode
		if(_method === 'PUT') {
			return 'City content successfully updated';
		}

		//creation mode
		let location = jqXHR.getResponseHeader('Location').replace('/api', '');	//we don't want no API links here
		return 'City successfully processed and available in <a href="' + location + '">' + location + '</a>';

	};


	var changeResultContainer = function(content, success) {

		let $resultContainer = $('#result');
		let className = success? 'success' : 'danger';

		$resultContainer.fadeOut(function() {
			$(this).removeClass().addClass('alert alert-' + className).html(content).fadeIn();
		});

	};


	var changeBreadcrumbsCityName = function(newCityName) {

		let $breadcrumbsNav = $('ol.breadcrumb');

		$breadcrumbsNav.fadeOut(function() {
			$('#breadcrumbCityName').find('a').text(newCityName);
			$breadcrumbsNav.fadeIn();
		})

	};


	var submitCity = function() {

		//can't send anything if the form isn't valid (perform the native browswer HTML5 validation)
		if(!$('#cityForm')[0].checkValidity()) {
			return;
		}

		var cityData = {
			name: $('#inputName').val(),
			latitude: parseFloat($('#inputLatitude').val()),
			longitude: parseFloat($('#inputLongitude').val())
		};

		$.when(Application.sendData(_method, _endpoint, cityData))

		.done(function(data, textStatus, jqXHR) {

			let content = getSuccessMessage(jqXHR);
			changeResultContainer(content, true);

			if(_method === 'PUT') {

				if(data.name !== undefined) {
					changeBreadcrumbsCityName(data.name);
				}

			}

		})

		.fail(function(jqXHR, textStatus, errorThrown) {

			let content = Application.getErrorMessage(jqXHR, textStatus, errorThrown);
			changeResultContainer(content, false);
			Application.debugError(jqXHR, textStatus, errorThrown);

		});

	};


	var init = function(method, endpoint) {

		//retrieve the connection data
		_method = method;
		_endpoint = Application.getRemoteUrl() + endpoint;

		//disable traditional form submission
		$('#cityForm').submit(function(e) {
			e.preventDefault();
		});

		//connect the click event of the submit button to sending the form with AJAX
		$('#citySubmitButton').click(submitCity);

	};


	return {
		init: init
	};


})(); //autoexecute


var ListCities = (function() {


	var _endpoint 		= '';

	const _editIcon 	= 'fa-edit';
	const _removeIcon 	= 'fa-trash-alt';
	const _recoverIcon  = 'fa-trash-restore';


	var generateFaIcon = function(className) {
		return $('<i></i>').addClass('fa fa-2x ' +  className);
	};


	var generateCityLink = function(href) {
		return $('<a></a>').attr('href', href);
	};


	var enableCityRow = function($cityRow, newLocation) {

		//update the city id contained in the $cityRow
		let id = parseInt(newLocation.split('/').pop());
		$cityRow.data('id', id);

		//empty cells
		$cityRow.find('td.cityViewLinkContainer').empty();
		$cityRow.find('td.cityEditLinkContainer').empty();

		//substitute them by clickable info
		$cityRow.find('td.cityViewLinkContainer').append(generateCityLink(newLocation).text($cityRow.data('name')));
		$cityRow.find('td.cityEditLinkContainer').append(generateCityLink(newLocation).append(generateFaIcon(_editIcon)));

		//change the recover button for the delete button (behaviour and aspect)
		$cityRow.find('button.cityRecoverButton').removeClass('cityRecoverButton').addClass('cityDeleteButton')
												 .empty().append(generateFaIcon(_removeIcon));

		//strip color and ready to go
		$cityRow.removeClass('table-danger').removeClass('text-muted');
		return $cityRow;

	};


	var disableCityRow = function($cityRow) {

		//destroy links
		$cityRow.find('td.cityViewLinkContainer').empty();
		$cityRow.find('td.cityEditLinkContainer').empty();

		//substitute them by non-clickable info
		$cityRow.find('td.cityViewLinkContainer').text($cityRow.data('name'));
		$cityRow.find('td.cityEditLinkContainer').append(generateFaIcon(_editIcon));

		//change the delete button for the recover button (behaviour and aspect)
		$cityRow.find('button.cityDeleteButton').removeClass('cityDeleteButton').addClass('cityRecoverButton')
												.empty().append(generateFaIcon(_recoverIcon));

		//add color and ready to go
		$cityRow.addClass('table-danger text-muted');
		return $cityRow;

	};


	var recoverCity = function() {

		let $cityRow = $(this).parents('.cityRow');

		let city = {
			name: 		$cityRow.data('name'),
			latitude: 	parseFloat($cityRow.data('latitude')),
			longitude: 	parseFloat($cityRow.data('longitude'))
		};

		$.when(Application.sendData('POST', _endpoint, city))

		.done(function(data, textStatus, jqXHR) {

			let newLocation = jqXHR.getResponseHeader('Location').replace('/api', '');	//we don't want no API links here

			$cityRow.fadeOut(function() {
				enableCityRow($cityRow, newLocation).fadeIn();
			});

		})

		.fail(function(jqXHR, textStatus, errorThrown) {
			Application.debugError(jqXHR, textStatus, errorThrown);
		});

	};


	var deleteCity = function() {

		let $cityRow = $(this).parents('.cityRow');
		let id = $cityRow.data('id');

		$.when(Application.sendData('DELETE', _endpoint + '/' + id))

		.done(function(data, textStatus, jqXHR) {

			$cityRow.fadeOut(function() {
				disableCityRow($cityRow).fadeIn();
			});

		})

		.fail(function(jqXHR, textStatus, errorThrown) {
			Application.debugError(jqXHR, textStatus, errorThrown);
		});


	};


	var init = function(endpoint) {

		//retrieve the connection data
		_endpoint = Application.getRemoteUrl() + endpoint;

		//connect the click event of the delete button to deleting a city with AJAX
		$(document).on('click', '.cityDeleteButton', deleteCity);

		//connect the click event of the delete button to creating a city with AJAX
		$(document).on('click', '.cityRecoverButton', recoverCity);

	};


	return {
		init: init
	};


})(); //autoexecute


var ViewCity = (function() {


	var _endpoint = '';

	const _editIcon 	= 'fa-edit';
	const _removeIcon 	= 'fa-trash-alt';
	const _recoverIcon  = 'fa-trash-restore';


	var generateFaIcon = function(className) {
		return $('<i></i>').addClass('fa ' +  className);
	};


	var generateCityEditLink = function(href) {
		return $('<a></a>').attr('href', href).addClass('btn btn-primary').append(generateFaIcon(_editIcon)).append('Edit');
	};


	var generateDisabledEditButton = function() {
		return $('<button></button>').addClass('btn btn-primary').prop('disabled', true)
									 .append(generateFaIcon(_editIcon)).append('Edit');
	};


	var setCityStatus = function(cityEnabled) {

		$('#cityStatus').fadeOut(function() {
			cityEnabled? $(this).addClass('hidden').fadeIn() : $(this).removeClass('hidden').fadeIn();
		});

	};

	var enableCityView = function($cityView, newLocation) {

		//update the city id contained in the $cityView
		let id = parseInt(newLocation.split('/').pop());
		$cityView.data('id', id);

		//update the browser navigation bar 
		//https://gomakethings.com/how-to-update-a-url-without-reloading-the-page-using-vanilla-javascript/
		let queryString = window.location.search;
		console.log(queryString);

		history.pushState(
			{
    			id: 'city'
			}, 
			'', 
			newLocation
		);

		//create new edit link
		$cityView.find('#cityEditLinkContainer').empty().append(generateCityEditLink(newLocation));

		//change the recover button for the delete button (behaviour and aspect)
		$cityView.find('button.cityRecoverButton').removeClass('cityRecoverButton').addClass('cityDeleteButton')
												  .empty().append(generateFaIcon(_removeIcon)).append('Delete');

		//if sunrise-sunset view exists: enable its controls
		$sunriseSunsetView = $('#sunriseSunsetView');

		if($sunriseSunsetView.length > 0) {
			$sunriseSunsetView.find('#timezoneSelector').prop('disabled', false);
			$sunriseSunsetView.find('#dateSelector').prop('disabled', false);
			$sunriseSunsetView.find('#sunriseSunsetCalculateButton').prop('disabled', false);
			$sunriseSunsetView.find('#sunriseSunsetForm').attr('action', newLocation);
		}

		//un-mute the text and ready to go
		$cityView.removeClass('text-muted');
		return $cityView;

	};


	var disableCityView = function($cityView) {

		//disable edit link: substitute it with a disabled button
		$cityView.find('#cityEditLinkContainer').empty().append(generateDisabledEditButton());

		//change the delete button for the recover button (behaviour and aspect)
		$cityView.find('button.cityDeleteButton').removeClass('cityDeleteButton').addClass('cityRecoverButton')
												 .empty().append(generateFaIcon(_recoverIcon)).append('Recover');

		//if sunrise-sunset view exists: disable its controls
		$sunriseSunsetView = $('#sunriseSunsetView');

		if($sunriseSunsetView.length > 0) {
			$sunriseSunsetView.find('#timezoneSelector').prop('disabled', true);
			$sunriseSunsetView.find('#dateSelector').prop('disabled', true);
			$sunriseSunsetView.find('#sunriseSunsetCalculateButton').prop('disabled', true);
		}

		//mute the text and ready to go
		$cityView.addClass('text-muted');
		return $cityView;

	};



	var recoverCity = function() {

		let $cityView = $('#cityView');

		let city = {
			name: 		$cityView.data('name'),
			latitude: 	parseFloat($cityView.data('latitude')),
			longitude: 	parseFloat($cityView.data('longitude'))
		};

		$.when(Application.sendData('POST', _endpoint, city))

		.done(function(data, textStatus, jqXHR) {

			let newLocation = jqXHR.getResponseHeader('Location').replace('/api', '');	//we don't want no API links here

			$cityView.fadeOut(function() {

				$.when(setCityStatus(true))
				.then(enableCityView($cityView, newLocation).fadeIn());

			});

		})

		.fail(function(jqXHR, textStatus, errorThrown) {
			Application.debugError(jqXHR, textStatus, errorThrown);
		});

	};


	var deleteCity = function() {

		let $cityView = $('#cityView');
		let id = $('#cityView').data('id');

		$.when(Application.sendData('DELETE', _endpoint + '/' + id))

		.done(function(data, textStatus, jqXHR) {

			$cityView.fadeOut(function() {

				$.when(setCityStatus(false))
				.then(disableCityView($cityView).fadeIn());

			});

		})

		.fail(function(jqXHR, textStatus, errorThrown) {
			Application.debugError(jqXHR, textStatus, errorThrown);
		});

	};


	var init = function(endpoint) {

		//retrieve the connection data
		_endpoint = Application.getRemoteUrl() + endpoint;

		//http://www.daterangepicker.com/#examples
		$('#dateSelector').daterangepicker({
			startDate: $('#dateSelector').data('startDate'),
			singleDatePicker: true,
			locale: {
				format: 'YYYY-MM-DD'
			}
		});

		//connect the click event of the delete button to deleting a city with AJAX
		$(document).on('click', '.cityDeleteButton', deleteCity);

		//connect the click event of the delete button to creating a city with AJAX
		$(document).on('click', '.cityRecoverButton', recoverCity);

	};


	return {
		init: init
	};


})(); //autoexecute


var Application = (function() {


	var _remoteUrl = '';
	var _requestUri = '';


	var getRemoteUrl = function() {
		return _remoteUrl;
	};


	var getRequestUri = function() {
		return _requestUri;
	};


	var getScrollDirection = function() {

		var parts = requestUri.split('#');

		if(parts.length == 1) {
			return '';
		}
		return parts.pop();

	};


	var getData = function(requestUrl) {
		return $.get(requestUrl);
	};


	var sendData = function(method, requestUrl, data = null, headers = []) {

		let request = {
		    url: requestUrl,
		    type: method,
		    contentType: 'application/json;charset=utf-8',
		    dataType: 'json',	//automatically parse the response data for us
		    accepts: {
		    	json: 'application/json;charset=utf-8'
		    }
		};

		if(data !== null) {
			request['data'] = JSON.stringify(data);
		}

		if(headers.length > 0) {
			request['headers'] = headers
		}

		return $.ajax(request);

	};


	var getErrorMessage = function(jqXHR, textStatus, errorThrown) {

		if(jqXHR.status === 0) {
			return jqXHR.statusText;
		}

		let basicErrorMessage = 'Error ' + jqXHR.status + ': ' + errorThrown;

		if(jqXHR.responseText === undefined || jqXHR.responseText === null || jqXHR.responseText.length === 0) {
			return basicErrorMessage;
		}

		//additional error information passed on the response body
		let errors = JSON.parse(jqXHR.responseText).errors || [];
		let errorMessages = [];

		for(const error of errors) {

			let errorString = '(' + error.message;
			console.log(error);

			if(error.file !== undefined && error.file !== null) {
				errorString += ' on file: ' + error.file;
			}

			if(error.line !== undefined && error.line !== null) {
				errorString += ' at line: ' + error.line;
			}

			errorString += ')';
			errorMessages.push(errorString);

		}

		if(errorMessages.length > 0) {
			basicErrorMessage += ' ' + errorMessages.join(', ');
		}

		return basicErrorMessage;

	};


	var debugError = function(jqXHR, textStatus, errorThrown) {
		console.log(getErrorMessage(jqXHR, textStatus, errorThrown));
	};


	var init = function(remoteUrl) {
		_remoteUrl = remoteUrl;
		_requestUri = window.location.href.replace(remoteUrl, '');
	};


	return {

		//public functions
		init: 				init,

		getRemoteUrl: 		getRemoteUrl,
		getRequestUri: 		getRequestUri,
		getScrollDirection: getScrollDirection,

		getData: 			getData, 
		sendData: 			sendData,
		getErrorMessage: 	getErrorMessage,
		debugError: 		debugError,

		Modules: {
			InputCity: 		InputCity,	//allows to communicate with the API to create and edit cities
			ViewCity:   	ViewCity,	//allows to work with the daterangepicker element and communicate with the API to delete/recover
			ListCities: 	ListCities	//allows to communicate with the API to delete/recover cities
		}

	};

})(); //autoexecute


//at start:
$(function() {

	//setting up application
	let remoteUrl = $('footer').data('remoteUrl'); 
	Application.init(remoteUrl);

	//routing
	switch(true) {

		// /cities/[i:id]/edit
		case Application.getRequestUri().match(/^(\/cities\/[0-9]+\/edit)$/) !== null: 

			let pathItems = Application.getRequestUri().split('/'); // /['', 'cities', '[i:id]', 'edit'] 
			let id = parseInt(pathItems[2]);

			console.log('/cities/[i:id]/edit');
			Application.Modules.InputCity.init('PUT', '/api/cities/' + id);
			break;

		// /cities(/page-[i:page])
		case Application.getRequestUri().match(/^(\/cities)$/) !== null:
		case Application.getRequestUri().match(/^(\/cities\/page-)[0-9]+/) !== null: 

			console.log('/cities');
			Application.Modules.ListCities.init('/api/cities');	//DELETE and POST (recover)
			break;

		// /cities/search(/page-[i:page])
		case Application.getRequestUri().match(/^(\/cities\/search)$/) !== null:
		case Application.getRequestUri().match(/^(\/cities\/search\/page-)[0-9]+/) !== null: 

			console.log('/cities/search');
			Application.Modules.ListCities.init('/api/cities');	//DELETE and POST (recover)
			break;

		// /cities/[i:id]
		case Application.getRequestUri().match(/^(\/cities\/)[0-9]+/) !== null:

			console.log('/cities/[i:id]');
			Application.Modules.ViewCity.init('/api/cities');	//DELETE and POST (recover)
			break;

		// /cities/new
		case Application.getRequestUri().match(/^(\/cities\/new)$/) !== null: 			

			console.log('/cities/new');
			Application.Modules.InputCity.init('POST', '/api/cities');
			break;

	}

	//Toggle the side navigation
	$("#sidebarToggle").on('click',function(e) {
		e.preventDefault();
		$("body").toggleClass("sidebar-toggled");
		$(".sidebar").toggleClass("toggled");
	});

	//Prevent the content wrapper from scrolling when the fixed side navigation hovered over
	$('body.fixed-nav .sidebar').on('mousewheel DOMMouseScroll wheel', function(e) {
		if($(window).width() > 768) {
			var e0 = e.originalEvent,
			delta = e0.wheelDelta || -e0.detail;
			this.scrollTop += (delta < 0 ? 1 : -1) * 30;
			e.preventDefault();
		}
	});

	//Scroll to top button appear
	$(document).on('scroll',function() {
		var scrollDistance = $(this).scrollTop();
		if(scrollDistance > 100) {
			$('.scroll-to-top').fadeIn();
		} 
		else {
			$('.scroll-to-top').fadeOut();
		}
	});

	//Smooth scrolling using jQuery easing
	$(document).on('click', 'a.scroll-to-top', function(event) {
		var $anchor = $(this);
		$('html, body').stop().animate({
			scrollTop: ($($anchor.attr('href')).offset().top)
		}, 1000, 'easeInOutExpo');
		event.preventDefault();
	});

});
